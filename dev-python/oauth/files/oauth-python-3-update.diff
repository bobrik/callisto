--- oauth-orig.py	2010-01-06 23:49:46.000000000 +0200
+++ oauth.py	2010-07-26 01:35:49.179683910 +0300
@@ -23,19 +23,35 @@ THE SOFTWARE.
 """
 
 import cgi
-import urllib
 import time
 import random
-import urlparse
 import hmac
 import binascii
 
+try:
+    # try to import python3 modules
+    import urllib.request, urllib.parse, urllib.error
+    import urllib.parse
+    quote = urllib.parse.quote
+    urlparse = urllib.parse.urlparse
+    urlunparse = urllib.parse.urlunparse
+    urlencode = urllib.parse.urlencode
+    unquote = urllib.parse.unquote
+except:
+    # fallback to python2 modules
+    import urllib
+    import urlparse
+    quote = urllib.quote
+    urlparse = urlparse.urlparse
+    urlunparse = urlparse.urlunparse
+    urlencode = urllib.urlencode
+    unquote = urllib.unquote
+
 
 VERSION = '1.0' # Hi Blaine!
 HTTP_METHOD = 'GET'
 SIGNATURE_METHOD = 'PLAINTEXT'
 
-
 class OAuthError(RuntimeError):
     """Generic exception class."""
     def __init__(self, message='OAuth error occured.'):
@@ -47,11 +63,11 @@ def build_authenticate_header(realm=''):
 
 def escape(s):
     """Escape a URL including any /."""
-    return urllib.quote(s, safe='~')
+    return quote(s, safe='~')
 
 def _utf8_str(s):
     """Convert unicode to utf-8."""
-    if isinstance(s, unicode):
+    if 'unicode' in dir(__builtins__) and isinstance(s, unicode):
         return s.encode("utf-8")
     else:
         return str(s)
@@ -115,13 +131,13 @@ class OAuthToken(object):
     def get_callback_url(self):
         if self.callback and self.verifier:
             # Append the oauth_verifier.
-            parts = urlparse.urlparse(self.callback)
+            parts = urlparse(self.callback)
             scheme, netloc, path, params, query, fragment = parts[:6]
             if query:
                 query = '%s&oauth_verifier=%s' % (query, self.verifier)
             else:
                 query = 'oauth_verifier=%s' % self.verifier
-            return urlparse.urlunparse((scheme, netloc, path, params,
+            return urlunparse((scheme, netloc, path, params,
                 query, fragment))
         return self.callback
 
@@ -132,7 +148,7 @@ class OAuthToken(object):
         }
         if self.callback_confirmed is not None:
             data['oauth_callback_confirmed'] = self.callback_confirmed
-        return urllib.urlencode(data)
+        return urlencode(data)
  
     def from_string(s):
         """ Returns a token from something like:
@@ -212,7 +228,7 @@ class OAuthRequest(object):
     def to_postdata(self):
         """Serialize as post data for a POST request."""
         return '&'.join(['%s=%s' % (escape(str(k)), escape(str(v))) \
-            for k, v in self.parameters.iteritems()])
+            for k, v in self.parameters.items()])
 
     def to_url(self):
         """Serialize as a URL for a GET request."""
@@ -240,7 +256,7 @@ class OAuthRequest(object):
 
     def get_normalized_http_url(self):
         """Parses the URL and rebuilds it to be scheme://host/path."""
-        parts = urlparse.urlparse(self.http_url)
+        parts = urlparse(self.http_url)
         scheme, netloc, path = parts[:3]
         # Exclude default port numbers.
         if scheme == 'http' and netloc[-3:] == ':80':
@@ -288,7 +304,7 @@ class OAuthRequest(object):
             parameters.update(query_params)
 
         # URL parameters.
-        param_str = urlparse.urlparse(http_url)[4] # query
+        param_str = urlparse(http_url)[4] # query
         url_params = OAuthRequest._split_url_string(param_str)
         parameters.update(url_params)
 
@@ -354,7 +370,7 @@ class OAuthRequest(object):
             # Split key-value.
             param_parts = param.split('=', 1)
             # Remove quotes and unescape the value.
-            params[param_parts[0]] = urllib.unquote(param_parts[1].strip('\"'))
+            params[param_parts[0]] = unquote(param_parts[1].strip('\"'))
         return params
     _split_header = staticmethod(_split_header)
 
@@ -362,7 +378,7 @@ class OAuthRequest(object):
         """Turn URL string into parameters."""
         parameters = cgi.parse_qs(param_str, keep_blank_values=False)
         for k, v in parameters.iteritems():
-            parameters[k] = urllib.unquote(v[0])
+            parameters[k] = unquote(v[0])
         return parameters
     _split_url_string = staticmethod(_split_url_string)
 
@@ -628,13 +644,18 @@ class OAuthSignatureMethod_HMAC_SHA1(OAu
         # HMAC object.
         try:
             import hashlib # 2.5
-            hashed = hmac.new(key, raw, hashlib.sha1)
+            try:
+                hashed = hmac.new(key, raw, hashlib.sha1)
+            except TypeError:
+                hashed = hmac.new(key.encode('utf-8'),
+                                  raw.encode('utf-8'),
+                                  hashlib.sha1) # python3
         except:
             import sha # Deprecated
             hashed = hmac.new(key, raw, sha)
 
         # Calculate the digest base 64.
-        return binascii.b2a_base64(hashed.digest())[:-1]
+        return str(binascii.b2a_base64(hashed.digest())[:-1].decode('utf-8'))
 
 
 class OAuthSignatureMethod_PLAINTEXT(OAuthSignatureMethod):
